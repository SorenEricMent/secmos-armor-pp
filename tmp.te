
module tmp 1.0;

require {
	type var_lib_t;
	type dri_device_t;
	type tty_device_t;
	type policy_config_t;
	type gnome_home_t;
	type fs_t;
	type chromium_t;
	type sysctl_t;
	type node_t;
	type inspider_packet_t;
	type autofs_device_t;
	type getty_t;
	type xkb_var_lib_t;
	type etc_runtime_t;
	type auditd_log_t;
	type xdm_t;
	type initrc_runtime_t;
	type session_dbusd_tmp_t;
	type staff_gkeyringd_t;
	type ifconfig_t;
	type sysctl_kernel_t;
	type systemd_tmpfiles_conf_t;
	type semanage_store_t;
	type mplayer_home_t;
	type telegram_exec_t;
	type winbind_helper_exec_t;
	type device_t;
	type dosfs_t;
	type wm_tmp_t;
	type ssdp_packet_t;
	type clock_device_t;
	type chromium_sandbox_t;
	type xserver_misc_device_t;
	type vmware_file_t;
	type lvm_runtime_t;
	type ssh_agent_exec_t;
	type lircd_runtime_t;
	type dirmngr_t;
	type xdg_documents_tmp_t;
	type systemd_machined_t;
	type user_dbusd_t;
	type systemd_tmpfiles_t;
	type gnome_xdg_config_t;
	type staff_t;
	type tmpfs_t;
	type sysfs_t;
	type java_t;
	type bluetooth_t;
	type dirmngr_home_t;
	type file_context_t;
	type systemd_cgtop_exec_t;
	type dof_dps_mc_sec_packet_t;
	type systemd_logind_t;
	type xdg_documents_private_t;
	type staff_systemd_t;
	type systemd_locale_t;
	type dnsmasq_t;
	type semanage_trans_lock_t;
	type systemd_homed_t;
	type boot_t;
	type udev_rules_t;
	type lvm_t;
	type secadm_git_t;
	type systemd_backlight_t;
	type usr_t;
	type mesa_shader_cache_t;
	type init_t;
	type sshd_exec_t;
	type dockerd_t;
	type cgroup_t;
	type syslogd_runtime_t;
	type hpvroom_packet_t;
	type gpg_secret_t;
	type system_dbusd_var_lib_t;
	type unreserved_port_t;
	type gpg_pinentry_t;
	type avahi_t;
	type xdm_exec_t;
	type home_root_t;
	type vhost_device_t;
	type var_run_t;
	type kernel_t;
	type user_t;
	type udev_runtime_t;
	type gpg_t;
	type system_dbusd_t;
	type gnome_keyring_tmp_t;
	type selinux_config_t;
	type tmosms1_packet_t;
	type httpd_suexec_exec_t;
	type container_runtime_t;
	type sysctl_vm_t;
	type user_tmpfs_t;
	type pulseaudio_tmp_t;
	type usb_device_t;
	type udev_t;
	type xdg_cache_t;
	type evolution_t;
	type xdg_data_t;
	type telepathy_mission_control_t;
	type sysctl_vm_overcommit_t;
	type named_runtime_t;
	type zero_device_t;
	type fonts_cache_t;
	type net_conf_t;
	type systemd_homed_runtime_t;
	type snort_t;
	type systemd_machined_runtime_t;
	type ora_oap_packet_t;
	type auditd_t;
	type httpd_runtime_t;
	type thunderbird_home_t;
	type bin_t;
	type user_fonts_config_t;
	type mouse_device_t;
	type gpg_agent_t;
	type vmware_host_pid_t;
	type bootpc_packet_t;
	type ntp_packet_t;
	type auditd_runtime_t;
	type evolution_xdg_config_t;
	type fonts_t;
	type www_http_packet_t;
	type iptables_runtime_t;
	type systemd_userdbd_runtime_t;
	type spc_t;
	type svnserve_exec_t;
	type xdm_tmp_t;
	type samba_etc_t;
	type systemd_hostnamed_t;
	type farenet_packet_t;
	type gpiochip_device_t;
	type local_login_t;
	type fixed_disk_device_t;
	type lo_netif_t;
	type user_runtime_root_t;
	type transproxy_port_t;
	type vmware_device_t;
	type saslauthd_keytab_t;
	type kmod_t;
	type mount_t;
	type tmp_t;
	type systemd_logind_runtime_t;
	type restorecond_run_t;
	type faillog_t;
	type cert_t;
	type shell_exec_t;
	type sysctl_fs_t;
	type imyx_packet_t;
	type blackjack_packet_t;
	type root_t;
	type secadm_systemd_t;
	type staff_dbusd_tmpfs_t;
	type virtd_t;
	type modules_object_t;
	type user_tmp_t;
	type sysctl_net_t;
	type etc_t;
	type efivarfs_t;
	type staff_sudo_t;
	type xdg_downloads_t;
	type usbguard_runtime_t;
	type ndm_agent_port_packet_t;
	type fdtracks_packet_t;
	type devicekit_runtime_t;
	type svnserve_runtime_t;
	type ssh_home_t;
	type pam_runtime_t;
	type virtlockd_exec_t;
	type gpm_exec_t;
	type cupsd_t;
	type sdmmp_packet_t;
	type git_xdg_config_t;
	type mozilla_home_t;
	type nvram_device_t;
	type xdg_documents_archive_t;
	type devicekit_disk_t;
	type domain_packet_t;
	type user_fonts_cache_t;
	type system_dbusd_runtime_t;
	type default_t;
	type devpts_t;
	type syslogd_t;
	type smbd_exec_t;
	type mount_runtime_t;
	type restorecond_t;
	type staff_git_t;
	type caerpc_packet_t;
	type local_ephemeral_port_t;
	type vmware_host_t;
	type user_cert_t;
	type scsi_generic_device_t;
	type initrc_t;
	type unlabeled_t;
	type locale_t;
	type lib_t;
	type modules_dep_t;
	type bis_sync_packet_t;
	type init_runtime_t;
	type xfs_tmp_t;
	type mnt_t;
	type xdg_pictures_t;
	type systemd_logind_inhibit_runtime_t;
	type wine_home_t;
	type systemd_user_runtime_dir_t;
	type getty_runtime_t;
	type user_runtime_t;
	type setfiles_t;
	type fuse_device_t;
	type hwdata_t;
	type boolean_t;
	type systemd_user_tmpfs_t;
	type mplayer_xdg_cache_t;
	type chromium_tmp_t;
	type xdg_documents_t;
	type ssh_t;
	type mplayer_xdg_config_t;
	type pulseaudio_xdg_config_t;
	type java_home_t;
	type nsfs_t;
	type uhid_device_t;
	type initrc_exec_t;
	type personal_agent_packet_t;
	type ppp_device_t;
	type staff_dbusd_t;
	type lvm_control_t;
	type usbguard_t;
	type semanage_read_lock_t;
	type loop_control_device_t;
	type gpg_runtime_t;
	type watchdog_device_t;
	type user_systemd_t;
	type dp_bura_packet_t;
	type usbguard_tmpfs_t;
	type evolution_tmpfs_t;
	type session_dbusd_runtime_t;
	type iso9660_t;
	type https_packet_t;
	type policykit_t;
	type user_home_dir_t;
	type xdg_documents_school_t;
	type rdmnet_ctrl_packet_t;
	type xdm_var_lib_t;
	type dmidecode_t;
	type dhcpc_runtime_t;
	type snmpd_exec_t;
	type NetworkManager_t;
	type telegram_t;
	type http_port_t;
	type devlog_t;
	type secadm_sudo_t;
	type systemd_tmpfiles_exec_t;
	type vmware_host_exec_t;
	type systemd_notify_exec_t;
	type kmsg_device_t;
	type wm_tmpfs_t;
	type xdg_documents_work_t;
	type v4l_device_t;
	type tpm_device_t;
	type user_home_t;
	type pam_motd_runtime_t;
	type staff_wm_t;
	type ip_provision_packet_t;
	type imaps_packet_t;
	type usbguard_rules_t;
	type fsdaemon_exec_t;
	type chromium_tmpfs_t;
	type ssh_packet_t;
	type security_t;
	type systemd_homework_t;
	type kvm_device_t;
	type mdns_packet_t;
	type systemd_sessions_runtime_t;
	type pmqos_device_t;
	type user_tty_device_t;
	type filenet_obrok_packet_t;
	type secadm_t;
	type event_device_t;
	type virtlogd_exec_t;
	type proc_psi_t;
	type policykit_auth_t;
	type samba_runtime_t;
	type var_t;
	type proc_t;
	type xserver_port_t;
	type systemd_user_runtime_t;
	type iptables_t;
	type framebuf_device_t;
	type snort_exec_t;
	type tmo_icon_sync_packet_t;
	type shadow_t;
	type xdg_music_t;
	type ntpd_t;
	type bootps_packet_t;
	type xdg_config_t;
	type systemd_journal_t;
	type systemd_userdbd_t;
	class file { append create execmod execute execute_no_trans getattr ioctl link lock map mounton open read relabelfrom relabelto rename setattr unlink watch watch_reads write };
	class netif egress;
	class node sendto;
	class peer recv;
	class packet { recv send };
	class dir { add_name create getattr ioctl mounton open read remove_name rename rmdir search setattr watch write };
	class chr_file { append execute getattr ioctl lock map open read unlink write };
	class tcp_socket { connect create getattr getopt name_bind name_connect node_bind read setopt write };
	class lnk_file { getattr read };
	class unix_stream_socket { connectto getattr ioctl read write };
	class fifo_file { getattr ioctl read write };
	class blk_file { getattr ioctl open read write };
	class capability { dac_read_search fowner linux_immutable net_admin setpcap sys_admin sys_module sys_ptrace sys_rawio sys_resource };
	class user_namespace create;
	class cap_userns { dac_override dac_read_search net_admin setfcap setpcap setuid sys_admin };
	class netlink_route_socket { bind create getattr getopt nlmsg_read nlmsg_write read setopt write };
	class process { execmem getattr getcap getsched noatsecure ptrace rlimitinh setsched siginh sigkill signal signull };
	class sock_file { create getattr write };
	class filesystem { getattr mount remount unmount };
	class binder { call set_context_mgr transfer };
	class security { load_policy read_policy setenforce };
	class fd use;
	class key search;
	class udp_socket node_bind;
	class unix_dgram_socket { create sendto write };
	class msgq { associate read unix_read unix_write write };
	class sem { associate read unix_read unix_write write };
	class msg { receive send };
	class perf_event { cpu open write };
	class rawip_socket node_bind;
}

#============= NetworkManager_t ==============
allow NetworkManager_t bootpc_packet_t:packet recv;
allow NetworkManager_t bootps_packet_t:packet send;
allow NetworkManager_t systemd_machined_t:unix_stream_socket connectto;
allow NetworkManager_t unlabeled_t:node sendto;

#============= auditd_t ==============
allow auditd_t systemd_machined_t:unix_stream_socket connectto;

#============= avahi_t ==============
allow avahi_t sysctl_t:netif egress;
allow avahi_t systemd_homed_runtime_t:sock_file write;
allow avahi_t systemd_homed_t:unix_stream_socket connectto;
allow avahi_t systemd_machined_t:unix_stream_socket connectto;
allow avahi_t unlabeled_t:node sendto;
allow avahi_t unlabeled_t:packet { recv send };
allow avahi_t unlabeled_t:udp_socket node_bind;

#============= bluetooth_t ==============
allow bluetooth_t uhid_device_t:chr_file { getattr open read write };

#============= chromium_t ==============
allow chromium_t boolean_t:file { open read };
allow chromium_t caerpc_packet_t:packet recv;
allow chromium_t chromium_tmpfs_t:file execute;

#!!!! This avc can be allowed using the boolean 'chromium_read_system_info'
allow chromium_t etc_runtime_t:file { getattr open read };
allow chromium_t filenet_obrok_packet_t:packet recv;
allow chromium_t hpvroom_packet_t:packet send;
allow chromium_t inspider_packet_t:packet recv;
allow chromium_t ip_provision_packet_t:packet recv;
allow chromium_t lo_netif_t:netif egress;
allow chromium_t local_ephemeral_port_t:tcp_socket name_connect;
allow chromium_t locale_t:dir watch;
allow chromium_t mdns_packet_t:packet { recv send };
allow chromium_t ndm_agent_port_packet_t:packet recv;
allow chromium_t node_t:tcp_socket name_connect;
allow chromium_t proc_psi_t:dir search;
allow chromium_t proc_psi_t:file { getattr open read };
allow chromium_t pulseaudio_tmp_t:dir read;

#!!!! This avc can be allowed using one of the these booleans:
#     chromium_read_all_user_content, chromium_manage_all_user_content
allow chromium_t pulseaudio_xdg_config_t:dir search;

#!!!! This avc can be allowed using one of the these booleans:
#     chromium_read_all_user_content, chromium_manage_all_user_content
allow chromium_t pulseaudio_xdg_config_t:file { open read };
allow chromium_t security_t:dir search;
allow chromium_t ssdp_packet_t:packet send;
allow chromium_t staff_wm_t:unix_stream_socket ioctl;
allow chromium_t sysctl_t:netif egress;
allow chromium_t systemd_machined_t:unix_stream_socket connectto;
allow chromium_t unlabeled_t:node sendto;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain packet { recv } ((l1 dom l2 -Fail-)  or (t1 == mlsnetreadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsnetread -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow chromium_t unlabeled_t:packet recv;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain peer { recv } ((l1 dom l2 -Fail-)  or (t1 == mlsnetreadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsnetread -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow chromium_t unlabeled_t:peer recv;
allow chromium_t unlabeled_t:udp_socket node_bind;

#!!!! This avc can be allowed using the boolean 'chromium_rw_usb_dev'
allow chromium_t usb_device_t:chr_file { ioctl open read write };
allow chromium_t user_home_t:file map;
allow chromium_t v4l_device_t:chr_file { getattr ioctl open read };
allow chromium_t var_lib_t:dir read;
allow chromium_t var_lib_t:file { getattr map open read };

#============= cupsd_t ==============
allow cupsd_t self:capability net_admin;
allow cupsd_t systemd_machined_t:unix_stream_socket connectto;
allow cupsd_t unlabeled_t:tcp_socket node_bind;

#============= devicekit_disk_t ==============

#!!!! This avc can be allowed using the boolean 'authlogin_nsswitch_use_ldap'
allow devicekit_disk_t cert_t:file { open read };
allow devicekit_disk_t lvm_control_t:chr_file open;
allow devicekit_disk_t lvm_runtime_t:dir { add_name remove_name write };
allow devicekit_disk_t lvm_runtime_t:file { create lock open read unlink write };
allow devicekit_disk_t mount_runtime_t:dir { add_name remove_name write };
allow devicekit_disk_t mount_runtime_t:file { create rename setattr unlink watch watch_reads };
allow devicekit_disk_t mount_t:process { noatsecure rlimitinh siginh };
allow devicekit_disk_t selinux_config_t:lnk_file read;
allow devicekit_disk_t sysctl_kernel_t:dir search;
allow devicekit_disk_t sysctl_kernel_t:file read;
allow devicekit_disk_t systemd_homed_runtime_t:sock_file write;
allow devicekit_disk_t systemd_homed_t:unix_stream_socket connectto;
allow devicekit_disk_t systemd_logind_inhibit_runtime_t:fifo_file write;
allow devicekit_disk_t systemd_logind_t:fd use;
allow devicekit_disk_t systemd_machined_t:unix_stream_socket connectto;
allow devicekit_disk_t systemd_sessions_runtime_t:file open;

#============= dirmngr_t ==============
allow dirmngr_t bin_t:dir search;

#============= dnsmasq_t ==============
allow dnsmasq_t bootpc_packet_t:packet send;
allow dnsmasq_t bootps_packet_t:packet recv;
allow dnsmasq_t sysctl_t:netif egress;
allow dnsmasq_t systemd_machined_t:unix_stream_socket connectto;
allow dnsmasq_t unlabeled_t:node sendto;
allow dnsmasq_t unlabeled_t:packet { recv send };
allow dnsmasq_t unlabeled_t:tcp_socket node_bind;
allow dnsmasq_t unlabeled_t:udp_socket node_bind;
allow dnsmasq_t var_lib_t:file { append getattr open read write };

#============= dockerd_t ==============
allow dockerd_t iptables_t:process { noatsecure rlimitinh siginh };
allow dockerd_t kmod_t:process { noatsecure rlimitinh siginh };

#!!!! This avc can be allowed using the boolean 'container_mounton_non_security'
allow dockerd_t security_t:dir search;
allow dockerd_t spc_t:process { noatsecure rlimitinh siginh };

#!!!! This avc can be allowed using one of the these booleans:
#     container_mounton_non_security, container_use_nfs
allow dockerd_t sysctl_fs_t:dir search;
allow dockerd_t systemd_machined_t:unix_stream_socket connectto;
allow dockerd_t unlabeled_t:tcp_socket node_bind;

#============= evolution_t ==============
allow evolution_t blackjack_packet_t:packet send;
allow evolution_t cgroup_t:file { open read };
allow evolution_t device_t:chr_file { getattr ioctl open read };
allow evolution_t devpts_t:filesystem mount;
allow evolution_t domain_packet_t:packet send;
allow evolution_t dri_device_t:chr_file { getattr ioctl map open read write };
allow evolution_t etc_runtime_t:file { getattr open read };
allow evolution_t etc_t:dir watch;
allow evolution_t etc_t:file map;
allow evolution_t evolution_tmpfs_t:dir { create mounton };
allow evolution_t evolution_tmpfs_t:file mounton;
allow evolution_t evolution_xdg_config_t:file map;
allow evolution_t fonts_t:dir mounton;
allow evolution_t fs_t:filesystem { getattr remount unmount };

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t gnome_xdg_config_t:dir { getattr search };

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t gnome_xdg_config_t:file { getattr open read };
allow evolution_t gnome_xdg_config_t:file map;
allow evolution_t gpg_t:process { noatsecure rlimitinh siginh };
allow evolution_t imaps_packet_t:packet send;
allow evolution_t imyx_packet_t:packet send;
allow evolution_t lib_t:dir mounton;
allow evolution_t lib_t:file execute_no_trans;
allow evolution_t lo_netif_t:netif egress;
allow evolution_t locale_t:file mounton;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t mesa_shader_cache_t:dir { getattr search };

#!!!! This avc can be allowed using the boolean 'evolution_manage_all_user_content'
allow evolution_t mesa_shader_cache_t:file { getattr open read write };
allow evolution_t mesa_shader_cache_t:file map;
allow evolution_t nsfs_t:file getattr;
allow evolution_t proc_t:filesystem mount;
allow evolution_t pulseaudio_tmp_t:dir getattr;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t pulseaudio_xdg_config_t:dir getattr;
allow evolution_t root_t:dir mounton;
allow evolution_t security_t:filesystem getattr;
allow evolution_t self:capability { net_admin setpcap sys_admin sys_ptrace };
allow evolution_t selinux_config_t:dir search;
allow evolution_t selinux_config_t:lnk_file read;
allow evolution_t session_dbusd_runtime_t:sock_file write;
allow evolution_t staff_t:process signull;
allow evolution_t staff_wm_t:unix_stream_socket { getattr ioctl read write };
allow evolution_t sysctl_t:netif egress;
allow evolution_t sysctl_vm_overcommit_t:file { open read };
allow evolution_t sysctl_vm_t:dir search;
allow evolution_t sysctl_vm_t:file { getattr open read };
allow evolution_t sysfs_t:dir read;
allow evolution_t sysfs_t:file { getattr open read };
allow evolution_t sysfs_t:filesystem { getattr remount };
allow evolution_t sysfs_t:lnk_file { getattr read };
allow evolution_t systemd_homed_runtime_t:sock_file write;
allow evolution_t systemd_homed_t:unix_stream_socket connectto;
allow evolution_t systemd_machined_t:unix_stream_socket connectto;
allow evolution_t systemd_user_runtime_t:dir { getattr mounton search };
allow evolution_t systemd_user_runtime_t:sock_file write;
allow evolution_t tmp_t:dir mounton;
allow evolution_t tmpfs_t:filesystem { mount remount unmount };
allow evolution_t unlabeled_t:node sendto;
allow evolution_t unlabeled_t:packet recv;
allow evolution_t unlabeled_t:peer recv;
allow evolution_t unreserved_port_t:tcp_socket name_connect;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_manage_user_certs, evolution_manage_all_user_content
allow evolution_t user_cert_t:dir { add_name remove_name write };

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_manage_user_certs, evolution_manage_all_user_content
allow evolution_t user_cert_t:file { append create rename unlink write };
allow evolution_t user_home_t:file map;
allow evolution_t user_runtime_t:dir { add_name create remove_name write };
allow evolution_t user_runtime_t:file { create open read unlink write };
allow evolution_t user_runtime_t:sock_file { create getattr write };

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_manage_generic_user_content, evolution_manage_all_user_content
allow evolution_t user_tmp_t:dir { add_name write };

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_manage_generic_user_content, evolution_manage_all_user_content
allow evolution_t user_tmp_t:file { create write };
allow evolution_t user_tmp_t:file map;
allow evolution_t usr_t:dir { mounton watch };
allow evolution_t v4l_device_t:chr_file { getattr ioctl open read write };
allow evolution_t var_lib_t:dir watch;
allow evolution_t var_lib_t:file { getattr map open };
allow evolution_t winbind_helper_exec_t:file execute;
allow evolution_t wm_tmpfs_t:file { map read write };
allow evolution_t xdg_cache_t:dir watch;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t xdg_cache_t:file { getattr lock open read unlink write };

#!!!! This avc can be allowed using the boolean 'evolution_manage_all_user_content'
allow evolution_t xdg_cache_t:sock_file write;
allow evolution_t xdg_config_t:dir watch;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t xdg_config_t:file { append getattr lock open read };
allow evolution_t xdg_data_t:dir watch;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t xdg_data_t:file { getattr open read };
allow evolution_t xdg_data_t:file map;

#!!!! This avc can be allowed using one of the these booleans:
#     evolution_read_all_user_content, evolution_manage_all_user_content
allow evolution_t xdg_data_t:lnk_file read;
allow evolution_t xkb_var_lib_t:dir { getattr read search };
allow evolution_t xkb_var_lib_t:file { getattr map open read };

#============= gpg_agent_t ==============
allow gpg_agent_t gpg_pinentry_t:process { noatsecure rlimitinh siginh };
allow gpg_agent_t sysfs_t:filesystem getattr;
allow gpg_agent_t udev_runtime_t:dir search;
allow gpg_agent_t udev_runtime_t:file { getattr open read };

#============= gpg_pinentry_t ==============
allow gpg_pinentry_t gpg_t:dir search;
allow gpg_pinentry_t gpg_t:file { getattr open read };
allow gpg_pinentry_t security_t:filesystem getattr;
allow gpg_pinentry_t selinux_config_t:dir search;
allow gpg_pinentry_t selinux_config_t:lnk_file read;
allow gpg_pinentry_t staff_systemd_t:fd use;
allow gpg_pinentry_t staff_systemd_t:unix_stream_socket { read write };

#============= gpg_t ==============
allow gpg_t staff_t:msg { receive send };
allow gpg_t staff_t:msgq { associate read unix_read unix_write write };
allow gpg_t staff_t:sem { associate read unix_read unix_write write };

#============= ifconfig_t ==============
allow ifconfig_t security_t:filesystem getattr;
allow ifconfig_t self:capability sys_module;
allow ifconfig_t selinux_config_t:dir search;
allow ifconfig_t selinux_config_t:lnk_file read;

#============= init_t ==============

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain node { sendto } ((l1 dom l2 -Fail-)  and (l1 domby h2)  or (t1 == mlsnetoutbound -Fail-) ); Constraint DENIED

#	Possible cause is the source level (s0-s15:c0.c1023) and target level (s15:c0.c1023) are different.
allow init_t unlabeled_t:node sendto;

#============= initrc_t ==============
allow initrc_t self:binder { call set_context_mgr transfer };
allow initrc_t self:perf_event { cpu open write };

#!!!! This avc can be allowed using one of the these booleans:
#     allow_execmem, allow_execstack
allow initrc_t self:process execmem;
allow initrc_t staff_t:binder { call transfer };
allow initrc_t unlabeled_t:file execmod;

#============= java_t ==============
allow java_t blackjack_packet_t:packet recv;
allow java_t cgroup_t:dir search;
allow java_t cgroup_t:file { getattr open read };
allow java_t domain_packet_t:packet send;
allow java_t https_packet_t:packet send;
allow java_t imyx_packet_t:packet recv;
allow java_t lo_netif_t:netif egress;

#!!!! This avc can be allowed using the boolean 'allow_java_execstack'
allow java_t self:process execmem;
allow java_t sysctl_t:netif egress;
allow java_t systemd_machined_t:unix_stream_socket connectto;
allow java_t transproxy_port_t:tcp_socket name_bind;
allow java_t unlabeled_t:node sendto;
allow java_t unlabeled_t:packet { recv send };
allow java_t unlabeled_t:peer recv;
allow java_t unlabeled_t:tcp_socket node_bind;
allow java_t unreserved_port_t:tcp_socket name_bind;

#============= kernel_t ==============

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain fd { use } ((l1 eq l2 -Fail-)  or (t1 == mlsfduse -Fail-)  or (t2 == mlsfdshare -Fail-) ); Constraint DENIED

#	Possible cause is the source level (s15:c0.c1023) and target level (s0-s15:c0.c1023) are different.
allow kernel_t mount_t:fd use;

#============= local_login_t ==============

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain key { view read write search link setattr create } ((l1 eq l2 -Fail-)  or (t1 == mlskeywritetoclr -Fail-)  and (h1 dom l2)  and (l1 domby l2)  or (t1 == mlskeywrite -Fail-) ); Constraint DENIED

#	Possible cause is the source level (s0-s15:c0.c1023) and target level (s15:c0.c1023) are different.
allow local_login_t kernel_t:key search;
allow local_login_t secadm_t:process { noatsecure rlimitinh siginh };
allow local_login_t unlabeled_t:dir search;

#============= lvm_t ==============
allow lvm_t self:capability dac_read_search;

#============= mount_t ==============
allow mount_t self:capability fowner;
allow mount_t unlabeled_t:dir read;
allow mount_t unlabeled_t:file { execute getattr mounton open read };
allow mount_t unlabeled_t:filesystem mount;
allow mount_t unlabeled_t:lnk_file { getattr read };
allow mount_t var_lib_t:chr_file unlink;
allow mount_t var_lib_t:dir { add_name create remove_name rmdir setattr write };
allow mount_t var_lib_t:file { create open rename unlink write };

#============= ntpd_t ==============
allow ntpd_t cgroup_t:file getattr;
allow ntpd_t ntp_packet_t:packet send;
allow ntpd_t selinux_config_t:dir search;
allow ntpd_t sysctl_t:netif egress;
allow ntpd_t unlabeled_t:node sendto;
allow ntpd_t unlabeled_t:packet { recv send };
allow ntpd_t unlabeled_t:peer recv;
allow ntpd_t unlabeled_t:udp_socket node_bind;

#============= policykit_auth_t ==============
allow policykit_auth_t faillog_t:dir search;
allow policykit_auth_t init_t:dir search;
allow policykit_auth_t init_t:file { getattr ioctl open read };
allow policykit_auth_t self:capability net_admin;

#!!!! This avc can be allowed using the boolean 'allow_kerberos'
allow policykit_auth_t selinux_config_t:dir search;
allow policykit_auth_t selinux_config_t:lnk_file read;
allow policykit_auth_t staff_systemd_t:fd use;
allow policykit_auth_t staff_systemd_t:unix_stream_socket { ioctl read write };
allow policykit_auth_t sysctl_kernel_t:dir search;
allow policykit_auth_t sysctl_kernel_t:file { open read };
allow policykit_auth_t systemd_homed_runtime_t:fifo_file write;
allow policykit_auth_t systemd_homed_runtime_t:sock_file write;
allow policykit_auth_t systemd_homed_t:fd use;
allow policykit_auth_t systemd_homed_t:unix_stream_socket connectto;
allow policykit_auth_t systemd_machined_t:unix_stream_socket connectto;

#============= policykit_t ==============
allow policykit_t security_t:filesystem getattr;

#============= secadm_sudo_t ==============
allow secadm_sudo_t cgroup_t:filesystem getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain chr_file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (secadm_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow secadm_sudo_t kmsg_device_t:chr_file getattr;
allow secadm_sudo_t proc_t:filesystem getattr;
allow secadm_sudo_t secadm_t:process { noatsecure rlimitinh siginh };

#!!!! This avc can be allowed using the boolean 'authlogin_pam'
allow secadm_sudo_t shadow_t:file read;
allow secadm_sudo_t systemd_machined_t:unix_stream_socket connectto;
allow secadm_sudo_t tty_device_t:chr_file getattr;

#============= secadm_systemd_t ==============
allow secadm_systemd_t proc_t:filesystem getattr;
allow secadm_systemd_t secadm_t:process { noatsecure siginh };

#============= secadm_t ==============
allow secadm_t NetworkManager_t:dir getattr;
allow secadm_t auditd_t:dir getattr;
allow secadm_t bluetooth_t:dir getattr;
allow secadm_t cupsd_t:dir getattr;
allow secadm_t devicekit_disk_t:dir getattr;
allow secadm_t dockerd_t:dir getattr;
allow secadm_t gpg_t:process { noatsecure rlimitinh siginh };
allow secadm_t hwdata_t:file read;
allow secadm_t initrc_t:dir getattr;
allow secadm_t kernel_t:dir getattr;
allow secadm_t local_login_t:dir { getattr search };
allow secadm_t ntpd_t:dir getattr;
allow secadm_t policykit_t:dir getattr;
allow secadm_t restorecond_t:dir getattr;
allow secadm_t secadm_git_t:process { noatsecure rlimitinh siginh };
allow secadm_t secadm_sudo_t:process { noatsecure rlimitinh siginh };
allow secadm_t secadm_systemd_t:dir getattr;
allow secadm_t snort_t:dir getattr;
allow secadm_t staff_dbusd_t:dir getattr;
allow secadm_t staff_gkeyringd_t:dir getattr;
allow secadm_t staff_systemd_t:dir getattr;
allow secadm_t staff_t:dir getattr;
allow secadm_t staff_wm_t:dir getattr;
allow secadm_t syslogd_t:dir getattr;
allow secadm_t system_dbusd_t:dir getattr;
allow secadm_t systemd_homed_t:dir getattr;
allow secadm_t systemd_hostnamed_t:dir getattr;
allow secadm_t systemd_locale_t:dir getattr;
allow secadm_t systemd_logind_t:dir getattr;
allow secadm_t systemd_machined_t:dir getattr;
allow secadm_t systemd_userdbd_t:dir getattr;
allow secadm_t udev_t:dir getattr;
allow secadm_t usbguard_t:dir getattr;
allow secadm_t virtd_t:dir getattr;
allow secadm_t vmware_host_t:dir getattr;
allow secadm_t xdm_t:dir getattr;

#============= setfiles_t ==============
allow setfiles_t proc_t:filesystem getattr;

#============= snort_t ==============
allow snort_t proc_t:file read;

#============= ssh_t ==============
allow ssh_t devpts_t:chr_file { append ioctl read write };
allow ssh_t domain_packet_t:packet send;
allow ssh_t gnome_keyring_tmp_t:dir search;
allow ssh_t gnome_keyring_tmp_t:sock_file write;
allow ssh_t ssh_packet_t:packet send;
allow ssh_t staff_gkeyringd_t:unix_stream_socket connectto;
allow ssh_t sysctl_t:netif egress;
allow ssh_t systemd_homed_runtime_t:sock_file write;
allow ssh_t systemd_homed_t:unix_stream_socket connectto;
allow ssh_t systemd_machined_t:unix_stream_socket connectto;
allow ssh_t unlabeled_t:chr_file { open read write };
allow ssh_t unlabeled_t:node sendto;
allow ssh_t unlabeled_t:packet recv;
allow ssh_t unlabeled_t:peer recv;

#============= staff_dbusd_t ==============
allow staff_dbusd_t boot_t:dir search;
allow staff_dbusd_t device_t:chr_file { ioctl open read };
allow staff_dbusd_t etc_t:file map;
allow staff_dbusd_t http_port_t:tcp_socket name_connect;
allow staff_dbusd_t https_packet_t:packet send;
allow staff_dbusd_t self:process getcap;
allow staff_dbusd_t session_dbusd_runtime_t:file map;
allow staff_dbusd_t session_dbusd_tmp_t:file map;
allow staff_dbusd_t ssdp_packet_t:packet { recv send };
allow staff_dbusd_t staff_dbusd_tmpfs_t:file { execute open };
allow staff_dbusd_t sysctl_fs_t:dir search;
allow staff_dbusd_t sysctl_t:netif egress;
allow staff_dbusd_t systemd_machined_t:unix_stream_socket connectto;
allow staff_dbusd_t systemd_user_tmpfs_t:file { read write };
allow staff_dbusd_t telepathy_mission_control_t:process { noatsecure rlimitinh siginh };
allow staff_dbusd_t udev_runtime_t:dir search;
allow staff_dbusd_t udev_runtime_t:file { getattr open read };
allow staff_dbusd_t unlabeled_t:node sendto;
allow staff_dbusd_t unlabeled_t:packet recv;
allow staff_dbusd_t unlabeled_t:peer recv;
allow staff_dbusd_t unlabeled_t:tcp_socket node_bind;
allow staff_dbusd_t unlabeled_t:udp_socket node_bind;
allow staff_dbusd_t user_home_dir_t:file { open read write };
allow staff_dbusd_t v4l_device_t:chr_file { ioctl open read write };

#============= staff_git_t ==============
allow staff_git_t devicekit_runtime_t:dir { getattr search };
allow staff_git_t devpts_t:chr_file append;
allow staff_git_t iso9660_t:dir { getattr open read search };

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_cache_t:dir read;

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_cache_t:file { getattr map open read };

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_documents_t:dir { getattr search };

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_documents_work_t:dir { getattr open read search };

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_documents_work_t:file { getattr map open read };

#!!!! This avc can be allowed using the boolean 'git_client_manage_all_user_home_content'
allow staff_git_t xdg_downloads_t:dir { getattr search };

#============= staff_gkeyringd_t ==============
allow staff_gkeyringd_t cert_t:dir search;
allow staff_gkeyringd_t cert_t:file { getattr open read };
allow staff_gkeyringd_t ssh_agent_exec_t:file { execute execute_no_trans map open read };

#============= staff_sudo_t ==============
allow staff_sudo_t devicekit_runtime_t:dir search;
allow staff_sudo_t fixed_disk_device_t:blk_file { getattr ioctl open read write };
allow staff_sudo_t init_runtime_t:file getattr;
allow staff_sudo_t iso9660_t:dir { getattr mounton open read search };
allow staff_sudo_t iso9660_t:filesystem { mount unmount };
allow staff_sudo_t kmsg_device_t:chr_file getattr;
allow staff_sudo_t mnt_t:dir mounton;
allow staff_sudo_t mount_runtime_t:dir { add_name remove_name search write };
allow staff_sudo_t mount_runtime_t:file { create getattr lock open read rename setattr unlink write };
allow staff_sudo_t self:capability { dac_read_search sys_rawio };
allow staff_sudo_t systemd_machined_t:unix_stream_socket connectto;
allow staff_sudo_t systemd_sessions_runtime_t:dir search;
allow staff_sudo_t systemd_sessions_runtime_t:file getattr;
allow staff_sudo_t tty_device_t:chr_file getattr;
allow staff_sudo_t user_tty_device_t:chr_file lock;
allow staff_sudo_t var_run_t:dir create;
allow staff_sudo_t var_run_t:file { create getattr link open read rename setattr unlink write };
allow staff_sudo_t xdg_documents_work_t:dir search;
allow staff_sudo_t xdg_documents_work_t:file { execute execute_no_trans getattr open read };
allow staff_sudo_t xserver_misc_device_t:chr_file getattr;

#============= staff_systemd_t ==============
allow staff_systemd_t chromium_sandbox_t:dir search;
allow staff_systemd_t chromium_sandbox_t:file { getattr ioctl open };
allow staff_systemd_t device_t:chr_file read;
allow staff_systemd_t devicekit_runtime_t:dir search;
allow staff_systemd_t dri_device_t:chr_file open;
allow staff_systemd_t etc_t:file map;
allow staff_systemd_t evolution_tmpfs_t:dir { open read search };
allow staff_systemd_t evolution_tmpfs_t:file { getattr map open read };
allow staff_systemd_t git_xdg_config_t:file getattr;
allow staff_systemd_t gnome_home_t:dir getattr;
allow staff_systemd_t gpg_agent_t:process { noatsecure rlimitinh siginh };
allow staff_systemd_t home_root_t:dir read;
allow staff_systemd_t http_port_t:tcp_socket name_connect;
allow staff_systemd_t https_packet_t:packet send;
allow staff_systemd_t iso9660_t:dir { getattr open read search watch };
allow staff_systemd_t iso9660_t:file getattr;
allow staff_systemd_t java_home_t:dir getattr;
allow staff_systemd_t modules_object_t:dir { getattr search };
allow staff_systemd_t modules_object_t:file { getattr read };
allow staff_systemd_t mozilla_home_t:dir getattr;
allow staff_systemd_t mplayer_home_t:dir getattr;
allow staff_systemd_t proc_t:filesystem getattr;
allow staff_systemd_t samba_etc_t:dir search;
allow staff_systemd_t samba_etc_t:file { getattr open read };
allow staff_systemd_t samba_runtime_t:dir search;
allow staff_systemd_t self:capability sys_admin;
allow staff_systemd_t self:process { sigkill signull };
allow staff_systemd_t ssh_home_t:dir { search write };
allow staff_systemd_t ssh_home_t:file { getattr read write };
allow staff_systemd_t sysctl_net_t:dir search;
allow staff_systemd_t sysctl_net_t:file { getattr open read };
allow staff_systemd_t sysctl_t:netif egress;
allow staff_systemd_t systemd_machined_t:unix_stream_socket connectto;
allow staff_systemd_t telegram_exec_t:file execute;

#!!!! This avc is allowed in the current policy
allow staff_systemd_t telegram_t:dir search;

#!!!! This avc is allowed in the current policy
#!!!! This av rule may have been overridden by an extended permission av rule
allow staff_systemd_t telegram_t:file { getattr ioctl open read };

#!!!! This avc is allowed in the current policy
allow staff_systemd_t telegram_t:lnk_file read;
allow staff_systemd_t thunderbird_home_t:dir getattr;
allow staff_systemd_t unlabeled_t:dir { getattr read search watch };
allow staff_systemd_t unlabeled_t:node sendto;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain packet { recv } ((l1 dom l2 -Fail-)  or (t1 == mlsnetreadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsnetread -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_systemd_t unlabeled_t:packet recv;
allow staff_systemd_t unlabeled_t:packet send;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain peer { recv } ((l1 dom l2 -Fail-)  or (t1 == mlsnetreadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsnetread -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_systemd_t unlabeled_t:peer recv;
allow staff_systemd_t user_home_t:file write;
allow staff_systemd_t var_lib_t:file map;
allow staff_systemd_t var_run_t:file { getattr open read };
allow staff_systemd_t vmware_file_t:dir { getattr ioctl open read search write };
allow staff_systemd_t vmware_file_t:file { execute getattr open read write };
allow staff_systemd_t winbind_helper_exec_t:file { execute execute_no_trans map open read };
allow staff_systemd_t wine_home_t:dir getattr;
allow staff_systemd_t xdg_documents_archive_t:dir { getattr read search watch write };
allow staff_systemd_t xdg_documents_archive_t:file getattr;
allow staff_systemd_t xdg_documents_private_t:dir { getattr read search watch write };
allow staff_systemd_t xdg_documents_private_t:file getattr;
allow staff_systemd_t xdg_documents_school_t:dir { getattr read search watch write };
allow staff_systemd_t xdg_documents_school_t:file { getattr open read write };
allow staff_systemd_t xdg_documents_t:file write;
allow staff_systemd_t xdg_documents_tmp_t:dir { getattr read search watch write };
allow staff_systemd_t xdg_documents_tmp_t:file getattr;
allow staff_systemd_t xdg_documents_work_t:dir { getattr read search watch write };
allow staff_systemd_t xdg_documents_work_t:file { getattr open read write };
allow staff_systemd_t xdg_documents_work_t:lnk_file { getattr read };
allow staff_systemd_t xdg_downloads_t:dir search;
allow staff_systemd_t xdg_downloads_t:file { getattr open read write };
allow staff_systemd_t xdg_music_t:dir search;
allow staff_systemd_t xdg_music_t:file { execute getattr read write };
allow staff_systemd_t xdg_pictures_t:dir { ioctl search };
allow staff_systemd_t xdg_pictures_t:file { getattr open read write };
allow staff_systemd_t xdm_tmp_t:sock_file write;
allow staff_systemd_t xserver_port_t:tcp_socket name_connect;

#============= staff_t ==============
allow staff_t NetworkManager_t:dir { open read };
allow staff_t NetworkManager_t:file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain file { write create setattr relabelfrom append unlink link rename mounton } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t2 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (h1 domby h2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t auditd_log_t:file { getattr read write };
allow staff_t auditd_runtime_t:file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain dir { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { search } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t auditd_t:dir { getattr search };
allow staff_t auditd_t:dir { open read };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t auditd_t:file read;
allow staff_t auditd_t:file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain lnk_file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t auditd_t:lnk_file read;
allow staff_t autofs_device_t:chr_file getattr;
allow staff_t avahi_t:dir { getattr open read search };
allow staff_t avahi_t:file { getattr read };
allow staff_t bis_sync_packet_t:packet send;
allow staff_t bluetooth_t:dir { open read };
allow staff_t bluetooth_t:file getattr;
allow staff_t boot_t:file { getattr ioctl open read write };
allow staff_t chromium_sandbox_t:dir { open read };
allow staff_t chromium_sandbox_t:file getattr;
allow staff_t chromium_tmp_t:dir getattr;
allow staff_t clock_device_t:chr_file getattr;
allow staff_t container_runtime_t:dir getattr;
allow staff_t container_runtime_t:file getattr;
allow staff_t cupsd_t:dir { open read };
allow staff_t cupsd_t:file getattr;
allow staff_t default_t:dir getattr;
allow staff_t default_t:file getattr;
allow staff_t device_t:chr_file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain dir { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { search } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t device_t:dir { getattr read search };
allow staff_t devicekit_disk_t:dir { open read };
allow staff_t devicekit_disk_t:file getattr;
allow staff_t devicekit_runtime_t:dir { getattr open read search watch write };
allow staff_t devpts_t:filesystem mount;
allow staff_t dhcpc_runtime_t:dir getattr;
allow staff_t dirmngr_home_t:dir getattr;
allow staff_t dirmngr_t:process { noatsecure rlimitinh siginh };
allow staff_t dnsmasq_t:dir { open read };
allow staff_t dnsmasq_t:file getattr;
allow staff_t dockerd_t:dir { open read };
allow staff_t dockerd_t:file getattr;
allow staff_t dof_dps_mc_sec_packet_t:packet send;

#!!!! This avc can be allowed using the boolean 'user_rw_noexattrfile'
allow staff_t dosfs_t:dir { add_name remove_name write };

#!!!! This avc can be allowed using the boolean 'user_rw_noexattrfile'
allow staff_t dosfs_t:file { create rename setattr unlink write };
allow staff_t dp_bura_packet_t:packet send;
allow staff_t efivarfs_t:dir { add_name search write };
allow staff_t efivarfs_t:file { create getattr open read setattr write };
allow staff_t etc_t:dir { add_name remove_name write };
allow staff_t etc_t:file { append create rename setattr unlink write };
allow staff_t event_device_t:chr_file write;
allow staff_t faillog_t:dir { getattr search };
allow staff_t faillog_t:file getattr;
allow staff_t farenet_packet_t:packet send;
allow staff_t fdtracks_packet_t:packet send;
allow staff_t file_context_t:dir { add_name read remove_name write };
allow staff_t file_context_t:file { create rename unlink write };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain blk_file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t fixed_disk_device_t:blk_file getattr;
allow staff_t fixed_disk_device_t:blk_file { open write };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain chr_file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t fixed_disk_device_t:chr_file getattr;
allow staff_t framebuf_device_t:chr_file getattr;
allow staff_t fs_t:filesystem { remount unmount };
allow staff_t fsdaemon_exec_t:file { execute getattr };
allow staff_t fuse_device_t:chr_file getattr;
allow staff_t getty_runtime_t:file getattr;
allow staff_t getty_t:dir { getattr open read search };
allow staff_t getty_t:file { getattr open read };
allow staff_t getty_t:lnk_file read;
allow staff_t gpg_agent_t:process { noatsecure rlimitinh siginh };
allow staff_t gpg_runtime_t:dir { add_name write };
allow staff_t gpg_runtime_t:sock_file create;
allow staff_t gpg_secret_t:file watch;
allow staff_t gpiochip_device_t:chr_file getattr;
allow staff_t gpm_exec_t:file { execute getattr };
allow staff_t home_root_t:dir watch;
allow staff_t httpd_runtime_t:dir getattr;
allow staff_t httpd_suexec_exec_t:file { execute getattr };
allow staff_t hwdata_t:dir search;
allow staff_t hwdata_t:file { getattr open read };
allow staff_t init_runtime_t:file getattr;
allow staff_t init_t:dir read;
allow staff_t initrc_exec_t:file { execute getattr };
allow staff_t initrc_runtime_t:dir getattr;
allow staff_t initrc_t:binder { call transfer };
allow staff_t initrc_t:dir { open read };
allow staff_t initrc_t:file getattr;
allow staff_t initrc_t:process signal;
allow staff_t iptables_runtime_t:file getattr;
allow staff_t iso9660_t:dir watch;
allow staff_t java_home_t:dir { getattr open read search write };
allow staff_t kernel_t:dir { open read };
allow staff_t kernel_t:file getattr;
allow staff_t kmsg_device_t:chr_file getattr;
allow staff_t kvm_device_t:chr_file getattr;
allow staff_t lircd_runtime_t:dir getattr;
allow staff_t lo_netif_t:netif egress;
allow staff_t local_login_t:dir { open read };
allow staff_t local_login_t:file { getattr open read };
allow staff_t local_login_t:lnk_file read;
allow staff_t loop_control_device_t:chr_file getattr;
allow staff_t lvm_control_t:chr_file getattr;
allow staff_t lvm_runtime_t:dir getattr;
allow staff_t modules_dep_t:file { getattr open read };
allow staff_t modules_object_t:dir search;
allow staff_t modules_object_t:file { getattr open read };
allow staff_t mount_runtime_t:dir { getattr search };
allow staff_t mount_runtime_t:file { getattr open read write };

#!!!! This avc can be allowed using the boolean 'user_direct_mouse'
allow staff_t mouse_device_t:chr_file getattr;
allow staff_t mplayer_xdg_cache_t:dir getattr;
allow staff_t mplayer_xdg_config_t:dir getattr;
allow staff_t named_runtime_t:dir getattr;
allow staff_t nsfs_t:file getattr;
allow staff_t ntpd_t:dir { getattr open read search };
allow staff_t ntpd_t:file { getattr open read };
allow staff_t ntpd_t:lnk_file read;
allow staff_t nvram_device_t:chr_file getattr;
allow staff_t ora_oap_packet_t:packet send;
allow staff_t pam_motd_runtime_t:dir getattr;
allow staff_t pam_runtime_t:dir getattr;
allow staff_t personal_agent_packet_t:packet send;
allow staff_t pmqos_device_t:chr_file getattr;
allow staff_t policy_config_t:dir { add_name getattr open read remove_name search write };
allow staff_t policy_config_t:file { create getattr map open read rename unlink write };
allow staff_t policykit_t:dir { open read };
allow staff_t policykit_t:file getattr;
allow staff_t ppp_device_t:chr_file getattr;
allow staff_t proc_t:filesystem mount;
allow staff_t rdmnet_ctrl_packet_t:packet send;
allow staff_t restorecond_run_t:file getattr;
allow staff_t restorecond_t:dir { getattr open read search };
allow staff_t restorecond_t:file { getattr open read };
allow staff_t restorecond_t:lnk_file read;
allow staff_t root_t:dir { mounton watch write };
allow staff_t saslauthd_keytab_t:dir getattr;
allow staff_t scsi_generic_device_t:chr_file getattr;
allow staff_t sdmmp_packet_t:packet send;
allow staff_t secadm_systemd_t:dir { getattr open read search };
allow staff_t secadm_systemd_t:file { getattr open read };
allow staff_t secadm_systemd_t:lnk_file read;
allow staff_t secadm_t:dir { getattr open read search };
allow staff_t secadm_t:file { getattr open read };
allow staff_t secadm_t:lnk_file read;
allow staff_t security_t:security { load_policy read_policy setenforce };
allow staff_t self:cap_userns { dac_override dac_read_search net_admin setfcap setpcap setuid sys_admin };
allow staff_t self:capability { linux_immutable setpcap sys_admin sys_ptrace };
allow staff_t self:netlink_route_socket nlmsg_write;
allow staff_t self:user_namespace create;
allow staff_t selinux_config_t:dir { add_name remove_name write };
allow staff_t selinux_config_t:file { create rename unlink };
allow staff_t semanage_read_lock_t:file { getattr lock open read };
allow staff_t semanage_store_t:dir { create getattr open read rename rmdir };
allow staff_t semanage_store_t:file unlink;
allow staff_t semanage_trans_lock_t:file { lock open read };
allow staff_t shadow_t:file { getattr open read };
allow staff_t smbd_exec_t:file { execute getattr };
allow staff_t snmpd_exec_t:file { execute getattr };
allow staff_t snort_exec_t:file { execute getattr };
allow staff_t snort_t:dir { open read };
allow staff_t snort_t:file getattr;
allow staff_t ssh_t:process { noatsecure rlimitinh siginh };
allow staff_t sshd_exec_t:file { execute getattr };
allow staff_t staff_sudo_t:dir { getattr search };
allow staff_t staff_sudo_t:file { open read };
allow staff_t staff_systemd_t:dir { open read };
allow staff_t staff_systemd_t:file getattr;
allow staff_t staff_systemd_t:lnk_file read;
allow staff_t staff_wm_t:fifo_file { getattr ioctl read };
allow staff_t staff_wm_t:unix_stream_socket getattr;
allow staff_t svnserve_exec_t:file { execute getattr };
allow staff_t svnserve_runtime_t:dir getattr;
allow staff_t sysctl_t:file { getattr open read };
allow staff_t sysctl_t:netif egress;
allow staff_t sysctl_vm_t:file { getattr open read };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain dir { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { search } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t syslogd_t:dir { getattr search };
allow staff_t syslogd_t:dir { open read };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t syslogd_t:file read;
allow staff_t syslogd_t:file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain lnk_file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (sbadm_u) and target user (system_u) are different.
#	Possible cause is the source role (staff_r) and target role (system_r) are different.
#	Possible cause is the source level (s0-s15:c0.c512) and target level (s15:c0.c1023) are different.
allow staff_t syslogd_t:lnk_file read;
allow staff_t system_dbusd_t:dir { open read };
allow staff_t system_dbusd_t:file getattr;
allow staff_t systemd_cgtop_exec_t:file { execute getattr };
allow staff_t systemd_homed_t:dir { open read };
allow staff_t systemd_homed_t:file getattr;
allow staff_t systemd_hostnamed_t:dir { getattr search };
allow staff_t systemd_hostnamed_t:file { open read };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain dir { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { search } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { write create setattr relabelfrom append unlink link rename mounton } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t2 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (h1 domby h2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { add_name remove_name reparent rmdir } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (l1 domby h2)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t systemd_journal_t:dir { getattr read search };

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain file { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain file { write create setattr relabelfrom append unlink link rename mounton } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t2 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (h1 domby h2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t systemd_journal_t:file { getattr read };
allow staff_t systemd_locale_t:dir { getattr search };
allow staff_t systemd_locale_t:file { open read };
allow staff_t systemd_logind_runtime_t:dir { read search };
allow staff_t systemd_logind_runtime_t:file getattr;
allow staff_t systemd_logind_t:dir { open read };
allow staff_t systemd_logind_t:file getattr;
allow staff_t systemd_machined_t:dir { getattr open read search };
allow staff_t systemd_machined_t:file { getattr open read };
allow staff_t systemd_machined_t:lnk_file read;
allow staff_t systemd_notify_exec_t:file { execute getattr };
allow staff_t systemd_sessions_runtime_t:dir { getattr open read search };
allow staff_t systemd_sessions_runtime_t:file getattr;
allow staff_t systemd_tmpfiles_conf_t:dir getattr;
allow staff_t systemd_tmpfiles_exec_t:file { execute getattr };
allow staff_t systemd_user_tmpfs_t:file getattr;
allow staff_t systemd_userdbd_t:dir { open read };
allow staff_t systemd_userdbd_t:file getattr;
allow staff_t telegram_t:dir { getattr search };
allow staff_t telegram_t:file { open read };
allow staff_t telegram_t:lnk_file read;
allow staff_t tmo_icon_sync_packet_t:packet send;
allow staff_t tmosms1_packet_t:packet send;
allow staff_t tmp_t:dir mounton;
allow staff_t tmp_t:file getattr;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain dir { read getattr execute } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { search } ((l1 dom l2 -Fail-)  or (t1 == mlsfilereadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsfileread -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { write create setattr relabelfrom append unlink link rename mounton } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t2 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (h1 domby h2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED
mlsconstrain dir { add_name remove_name reparent rmdir } ((l1 eq l2 -Fail-)  or (t1 == mlsfilewriteinrange -Fail-)  and (l1 dom l2 -Fail-)  and (l1 domby h2)  or (t1 == mlsfilewritetoclr -Fail-)  and (h1 dom l2 -Fail-)  and (l1 domby l2)  or (t1 == mlsfilewrite -Fail-)  or (t2 == mlstrustedobject -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_t tmpfs_t:dir getattr;
allow staff_t tmpfs_t:filesystem { mount unmount };
allow staff_t tpm_device_t:chr_file getattr;
allow staff_t udev_rules_t:dir search;
allow staff_t udev_rules_t:file getattr;
allow staff_t udev_t:dir { open read };
allow staff_t udev_t:file getattr;
allow staff_t uhid_device_t:chr_file getattr;
allow staff_t unlabeled_t:chr_file { ioctl map open read write };
allow staff_t unlabeled_t:dir { add_name create getattr open read remove_name search write };
allow staff_t unlabeled_t:file { append create getattr rename setattr };
allow staff_t unlabeled_t:node sendto;
allow staff_t unlabeled_t:packet { recv send };
allow staff_t unlabeled_t:peer recv;
allow staff_t unlabeled_t:tcp_socket node_bind;
allow staff_t unreserved_port_t:tcp_socket name_bind;

#!!!! This avc can be allowed using the boolean 'user_write_removable'
allow staff_t usb_device_t:chr_file write;
allow staff_t usbguard_runtime_t:file getattr;
allow staff_t usbguard_t:dir { open read };
allow staff_t usbguard_t:file getattr;
allow staff_t usbguard_t:lnk_file read;

#!!!! This avc can be allowed using the boolean 'usbguard_user_modify_rule_files'
allow staff_t usbguard_t:unix_stream_socket connectto;

#!!!! This avc can be allowed using the boolean 'usbguard_user_modify_rule_files'
allow staff_t usbguard_tmpfs_t:dir search;
allow staff_t usbguard_tmpfs_t:file { map open read write };
allow staff_t user_dbusd_t:dir { getattr search };
allow staff_t user_dbusd_t:file { open read };
allow staff_t user_systemd_t:dir { getattr search };
allow staff_t user_systemd_t:file { open read };
allow staff_t user_t:dir { getattr search };
allow staff_t user_t:file { open read };
allow staff_t user_tmp_t:file mounton;
allow staff_t user_tmpfs_t:dir mounton;
allow staff_t user_tmpfs_t:file mounton;
allow staff_t usr_t:dir { add_name remove_name write };
allow staff_t usr_t:file { create relabelfrom relabelto setattr unlink write };
allow staff_t var_lib_t:file { append map setattr };
allow staff_t var_run_t:dir write;
allow staff_t var_t:dir read;
allow staff_t vhost_device_t:chr_file getattr;
allow staff_t virtd_t:dir { getattr search };
allow staff_t virtd_t:file { open read };
allow staff_t virtlockd_exec_t:file { execute getattr };
allow staff_t virtlogd_exec_t:file { execute getattr };
allow staff_t vmware_device_t:chr_file getattr;
allow staff_t vmware_host_exec_t:file { execute getattr };
allow staff_t vmware_host_pid_t:file getattr;
allow staff_t vmware_host_t:dir { open read };
allow staff_t vmware_host_t:file getattr;
allow staff_t vmware_host_t:lnk_file read;
allow staff_t watchdog_device_t:chr_file getattr;
allow staff_t wine_home_t:dir { getattr open read search write };
allow staff_t wine_home_t:file getattr;
allow staff_t wm_tmp_t:file getattr;
allow staff_t xdg_documents_archive_t:file execute;
allow staff_t xdg_documents_t:file execute;
allow staff_t xdg_documents_work_t:dir watch;
allow staff_t xdg_documents_work_t:file execute;
allow staff_t xdm_exec_t:file { execute getattr };
allow staff_t xdm_t:dir { open read };
allow staff_t xdm_t:file getattr;
allow staff_t xfs_tmp_t:dir getattr;

#============= staff_wm_t ==============
allow staff_wm_t devicekit_runtime_t:dir { getattr search };
allow staff_wm_t etc_t:file map;
allow staff_wm_t evolution_t:fd use;
allow staff_wm_t evolution_t:fifo_file write;
allow staff_wm_t evolution_t:process { rlimitinh siginh };
allow staff_wm_t evolution_tmpfs_t:file { getattr map read write };
allow staff_wm_t http_port_t:tcp_socket name_connect;
allow staff_wm_t https_packet_t:packet send;
allow staff_wm_t initrc_t:dir search;
allow staff_wm_t initrc_t:fd use;
allow staff_wm_t initrc_t:file { getattr ioctl open read };
allow staff_wm_t initrc_t:lnk_file read;
allow staff_wm_t initrc_t:process getattr;
allow staff_wm_t iso9660_t:dir getattr;
allow staff_wm_t policykit_auth_t:process { noatsecure rlimitinh siginh };
allow staff_wm_t staff_dbusd_tmpfs_t:file { getattr map read write };
allow staff_wm_t staff_t:file ioctl;
allow staff_wm_t sysctl_t:netif egress;
allow staff_wm_t sysctl_vm_t:dir search;
allow staff_wm_t systemd_machined_t:unix_stream_socket connectto;
allow staff_wm_t telegram_t:dir search;
allow staff_wm_t telegram_t:fd use;
allow staff_wm_t telegram_t:fifo_file write;
allow staff_wm_t telegram_t:file { getattr ioctl open read };
allow staff_wm_t telegram_t:lnk_file read;
allow staff_wm_t telegram_t:process { getattr noatsecure rlimitinh siginh };
allow staff_wm_t unlabeled_t:node sendto;
allow staff_wm_t unlabeled_t:packet recv;

#!!!! This avc is a constraint violation.  You would need to modify the attributes of either the source or target types to allow this access.
#Constraint rule: 
#	mlsconstrain peer { recv } ((l1 dom l2 -Fail-)  or (t1 == mlsnetreadtoclr -Fail-)  and (h1 dom l2 -Fail-)  or (t1 == mlsnetread -Fail-) ); Constraint DENIED

#	Possible cause is the source user (staff_u) and target user (system_u) are different.
#	Possible cause is the source level (s0-s14:c0.c1023) and target level (s15:c0.c1023) are different.
allow staff_wm_t unlabeled_t:peer recv;
allow staff_wm_t user_runtime_t:sock_file write;
allow staff_wm_t var_lib_t:file map;
allow staff_wm_t wm_tmp_t:file map;
allow staff_wm_t wm_tmpfs_t:file execute;
allow staff_wm_t xdg_pictures_t:dir { add_name search write };
allow staff_wm_t xdg_pictures_t:file { create getattr open write };

#============= systemd_backlight_t ==============
allow systemd_backlight_t self:capability net_admin;
allow systemd_backlight_t selinux_config_t:dir search;

#============= systemd_homed_t ==============
allow systemd_homed_t unlabeled_t:dir { getattr open read };

#============= systemd_homework_t ==============
allow systemd_homework_t kernel_t:key search;
allow systemd_homework_t self:capability sys_resource;
allow systemd_homework_t shell_exec_t:file { execute map open read };
allow systemd_homework_t unlabeled_t:dir { getattr ioctl open read };

#============= systemd_locale_t ==============
allow systemd_locale_t security_t:filesystem getattr;

#============= systemd_logind_t ==============
allow systemd_logind_t usbguard_tmpfs_t:dir read;

#============= systemd_machined_t ==============
allow systemd_machined_t cgroup_t:file write;
allow systemd_machined_t selinux_config_t:lnk_file read;

#============= systemd_tmpfiles_t ==============
allow systemd_tmpfiles_t shadow_t:file getattr;
allow systemd_tmpfiles_t systemd_machined_t:unix_stream_socket connectto;

#============= systemd_user_runtime_dir_t ==============
allow systemd_user_runtime_dir_t proc_t:filesystem getattr;
allow systemd_user_runtime_dir_t self:capability net_admin;
allow systemd_user_runtime_dir_t systemd_machined_t:unix_stream_socket connectto;

#============= telegram_t ==============
allow telegram_t bin_t:file { execute getattr };
allow telegram_t cert_t:dir { getattr open read search };
allow telegram_t cert_t:file { getattr open read };
allow telegram_t cert_t:lnk_file read;
allow telegram_t devlog_t:sock_file write;
allow telegram_t dri_device_t:chr_file { getattr ioctl map open read write };
allow telegram_t etc_runtime_t:file { getattr open read };
allow telegram_t etc_t:file { getattr open read };
allow telegram_t etc_t:lnk_file read;
allow telegram_t fonts_cache_t:dir search;
allow telegram_t fonts_cache_t:file { getattr map open read };
allow telegram_t fonts_t:dir { getattr open read search };
allow telegram_t fonts_t:file { getattr map open read };
allow telegram_t fs_t:filesystem getattr;
allow telegram_t gnome_xdg_config_t:dir search;
allow telegram_t gnome_xdg_config_t:file { getattr map open read };
allow telegram_t home_root_t:dir search;
allow telegram_t http_port_t:tcp_socket name_connect;
allow telegram_t https_packet_t:packet send;
allow telegram_t init_runtime_t:dir search;
allow telegram_t kernel_t:unix_dgram_socket sendto;
allow telegram_t kernel_t:unix_stream_socket connectto;
allow telegram_t locale_t:dir search;
allow telegram_t locale_t:file { getattr map open read };
allow telegram_t mesa_shader_cache_t:dir { add_name getattr remove_name search write };
allow telegram_t mesa_shader_cache_t:file { create getattr lock map open read rename write };
allow telegram_t net_conf_t:file { getattr open read };
allow telegram_t pulseaudio_tmp_t:dir { getattr open read search };
allow telegram_t pulseaudio_tmp_t:sock_file write;
allow telegram_t pulseaudio_xdg_config_t:dir search;
allow telegram_t pulseaudio_xdg_config_t:file { lock open read };
allow telegram_t security_t:filesystem getattr;
allow telegram_t self:netlink_route_socket { bind create getattr getopt nlmsg_read read setopt write };
allow telegram_t self:process { execmem getsched ptrace setsched };
allow telegram_t self:tcp_socket { connect create getattr getopt read setopt write };
allow telegram_t self:unix_dgram_socket { create write };
allow telegram_t selinux_config_t:dir search;
allow telegram_t selinux_config_t:lnk_file read;
allow telegram_t session_dbusd_runtime_t:sock_file write;
allow telegram_t staff_dbusd_t:unix_stream_socket connectto;
allow telegram_t staff_t:process signull;
allow telegram_t staff_t:unix_stream_socket connectto;
allow telegram_t staff_wm_t:file read;
allow telegram_t staff_wm_t:unix_stream_socket { connectto getattr ioctl read write };
allow telegram_t sysctl_kernel_t:dir search;
allow telegram_t sysctl_kernel_t:file { open read };
allow telegram_t sysctl_t:netif egress;
allow telegram_t sysfs_t:dir read;
allow telegram_t sysfs_t:file { getattr open read };
allow telegram_t sysfs_t:lnk_file read;
allow telegram_t syslogd_runtime_t:dir search;
allow telegram_t system_dbusd_runtime_t:dir search;
allow telegram_t system_dbusd_runtime_t:sock_file write;
allow telegram_t system_dbusd_t:unix_stream_socket connectto;
allow telegram_t system_dbusd_var_lib_t:dir search;
allow telegram_t system_dbusd_var_lib_t:lnk_file read;
allow telegram_t systemd_homed_runtime_t:sock_file write;
allow telegram_t systemd_homed_t:unix_stream_socket connectto;
allow telegram_t systemd_machined_runtime_t:dir search;
allow telegram_t systemd_machined_t:unix_stream_socket connectto;
allow telegram_t systemd_user_runtime_t:dir search;
allow telegram_t systemd_user_runtime_t:sock_file write;
allow telegram_t systemd_userdbd_runtime_t:dir { getattr open read search };
allow telegram_t systemd_userdbd_runtime_t:lnk_file read;
allow telegram_t systemd_userdbd_runtime_t:sock_file write;
allow telegram_t systemd_userdbd_t:unix_stream_socket connectto;
allow telegram_t tmp_t:dir { add_name remove_name write };
allow telegram_t tmp_t:file { create getattr lock open read unlink write };
allow telegram_t tmpfs_t:dir { getattr open read };
allow telegram_t tmpfs_t:file { getattr map read write };
allow telegram_t unlabeled_t:node sendto;
allow telegram_t unlabeled_t:packet recv;
allow telegram_t unlabeled_t:peer recv;
allow telegram_t user_fonts_cache_t:dir search;
allow telegram_t user_fonts_cache_t:file { getattr map open read };
allow telegram_t user_fonts_config_t:file { getattr open read };
allow telegram_t user_home_dir_t:dir { getattr search };
allow telegram_t user_home_t:dir { getattr open read search };
allow telegram_t user_home_t:file { getattr map open read };
allow telegram_t user_home_t:lnk_file read;
allow telegram_t user_runtime_root_t:dir search;
allow telegram_t user_runtime_t:dir { getattr search };
allow telegram_t user_runtime_t:file { getattr open read };
allow telegram_t user_tmp_t:dir { getattr search };
allow telegram_t user_tmp_t:file { map open read write };
allow telegram_t user_tmp_t:sock_file write;
allow telegram_t usr_t:dir read;
allow telegram_t usr_t:file { getattr map open read };
allow telegram_t usr_t:lnk_file read;
allow telegram_t var_lib_t:dir { getattr search };
allow telegram_t var_lib_t:file { getattr map open read };
allow telegram_t wm_tmpfs_t:file { map read write };
allow telegram_t www_http_packet_t:packet send;
allow telegram_t xdg_cache_t:dir { add_name getattr remove_name search write };
allow telegram_t xdg_cache_t:file { getattr link map open read unlink write };
allow telegram_t xdg_cache_t:sock_file write;
allow telegram_t xdg_config_t:dir search;
allow telegram_t xdg_config_t:file { getattr open read watch };
allow telegram_t xdg_data_t:dir { add_name getattr open read remove_name search setattr write };
allow telegram_t xdg_data_t:file { append create getattr ioctl link lock map open read rename setattr unlink write };
allow telegram_t xdg_data_t:lnk_file read;
allow telegram_t xdg_downloads_t:dir search;
allow telegram_t xdg_downloads_t:file { getattr open read };
allow telegram_t xkb_var_lib_t:dir { getattr read search };
allow telegram_t xkb_var_lib_t:file { getattr map open read };
allow telegram_t zero_device_t:chr_file { execute map };

#============= telepathy_mission_control_t ==============
allow telepathy_mission_control_t selinux_config_t:dir search;
allow telepathy_mission_control_t session_dbusd_runtime_t:sock_file getattr;

#============= udev_t ==============
allow udev_t default_t:file getattr;
allow udev_t mount_t:process { noatsecure rlimitinh siginh };

#============= usbguard_t ==============
allow usbguard_t proc_t:filesystem getattr;
allow usbguard_t systemd_machined_t:unix_stream_socket connectto;

#!!!! This avc can be allowed using the boolean 'usbguard_user_modify_rule_files'
allow usbguard_t usbguard_rules_t:file write;

#============= user_dbusd_t ==============
allow user_dbusd_t self:process getcap;
allow user_dbusd_t systemd_machined_t:unix_stream_socket connectto;

#============= user_systemd_t ==============
allow user_systemd_t proc_t:filesystem getattr;
allow user_systemd_t user_t:process { noatsecure siginh };

#============= user_t ==============
allow user_t systemd_logind_runtime_t:dir { read search };
allow user_t systemd_logind_runtime_t:file getattr;
allow user_t systemd_sessions_runtime_t:dir read;
allow user_t systemd_user_tmpfs_t:file getattr;
allow user_t xdm_t:dir search;
allow user_t xdm_t:file read;
allow user_t xdm_t:lnk_file read;
allow user_t xdm_var_lib_t:dir { getattr read search };
allow user_t xdm_var_lib_t:file getattr;

#============= virtd_t ==============
allow virtd_t dmidecode_t:process { noatsecure rlimitinh siginh };
allow virtd_t dnsmasq_t:process { noatsecure rlimitinh siginh };
allow virtd_t ifconfig_t:process { noatsecure rlimitinh siginh };

#============= vmware_host_t ==============
allow vmware_host_t unlabeled_t:rawip_socket node_bind;

#============= xdm_t ==============
allow xdm_t unlabeled_t:node sendto;
